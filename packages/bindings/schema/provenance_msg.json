{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ProvenanceMsg",
  "description": "Represents a request to encode custom provenance messages.",
  "type": "object",
  "required": [
    "params",
    "route",
    "version"
  ],
  "properties": {
    "params": {
      "$ref": "#/definitions/ProvenanceMsgParams"
    },
    "route": {
      "$ref": "#/definitions/ProvenanceRoute"
    },
    "version": {
      "type": "string"
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AttributeMsgParams": {
      "description": "Input params for creating attribute module messages.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "add_attribute"
          ],
          "properties": {
            "add_attribute": {
              "type": "object",
              "required": [
                "address",
                "name",
                "value",
                "value_type"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "$ref": "#/definitions/Binary"
                },
                "value_type": {
                  "$ref": "#/definitions/AttributeValueType"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "delete_attribute"
          ],
          "properties": {
            "delete_attribute": {
              "type": "object",
              "required": [
                "address",
                "name"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AttributeValueType": {
      "description": "Allowed attribute value types.",
      "type": "string",
      "enum": [
        "uuid",
        "json",
        "string",
        "bytes",
        "uri",
        "int",
        "float",
        "proto",
        "unspecified"
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "MarkerAccess": {
      "description": "Marker permission types.",
      "type": "string",
      "enum": [
        "admin",
        "burn",
        "deposit",
        "delete",
        "mint",
        "transfer",
        "unspecified",
        "withdraw"
      ]
    },
    "MarkerMsgParams": {
      "description": "Input params for creating marker module messages.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "create_marker"
          ],
          "properties": {
            "create_marker": {
              "type": "object",
              "required": [
                "coin",
                "marker_type"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                },
                "marker_type": {
                  "$ref": "#/definitions/MarkerType"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "grant_marker_access"
          ],
          "properties": {
            "grant_marker_access": {
              "type": "object",
              "required": [
                "address",
                "denom",
                "permissions"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                },
                "denom": {
                  "type": "string"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MarkerAccess"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "revoke_marker_access"
          ],
          "properties": {
            "revoke_marker_access": {
              "type": "object",
              "required": [
                "address",
                "denom"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                },
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "finalize_marker"
          ],
          "properties": {
            "finalize_marker": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "activate_marker"
          ],
          "properties": {
            "activate_marker": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cancel_marker"
          ],
          "properties": {
            "cancel_marker": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "destroy_marker"
          ],
          "properties": {
            "destroy_marker": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "mint_marker_supply"
          ],
          "properties": {
            "mint_marker_supply": {
              "type": "object",
              "required": [
                "coin"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "burn_marker_supply"
          ],
          "properties": {
            "burn_marker_supply": {
              "type": "object",
              "required": [
                "coin"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "withdraw_coins"
          ],
          "properties": {
            "withdraw_coins": {
              "type": "object",
              "required": [
                "coin",
                "marker_denom",
                "recipient"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                },
                "marker_denom": {
                  "type": "string"
                },
                "recipient": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "transfer_marker_coins"
          ],
          "properties": {
            "transfer_marker_coins": {
              "type": "object",
              "required": [
                "coin",
                "from",
                "to"
              ],
              "properties": {
                "coin": {
                  "$ref": "#/definitions/Coin"
                },
                "from": {
                  "$ref": "#/definitions/Addr"
                },
                "to": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MarkerType": {
      "description": "Marker types.",
      "type": "string",
      "enum": [
        "coin",
        "restricted",
        "unspecified"
      ]
    },
    "NameMsgParams": {
      "description": "Input params for creating name module messages.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "bind_name"
          ],
          "properties": {
            "bind_name": {
              "type": "object",
              "required": [
                "address",
                "name",
                "restrict"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                },
                "name": {
                  "type": "string"
                },
                "restrict": {
                  "type": "boolean"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "delete_name"
          ],
          "properties": {
            "delete_name": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProvenanceMsgParams": {
      "description": "Input params for custom provenance message encoders.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "Name"
          ],
          "properties": {
            "Name": {
              "$ref": "#/definitions/NameMsgParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Attribute"
          ],
          "properties": {
            "Attribute": {
              "$ref": "#/definitions/AttributeMsgParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Marker"
          ],
          "properties": {
            "Marker": {
              "$ref": "#/definitions/MarkerMsgParams"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProvenanceRoute": {
      "description": "Supported provenance module router keys.",
      "type": "string",
      "enum": [
        "attribute",
        "marker",
        "name",
        "metadata"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
