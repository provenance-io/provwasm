{
  "contract_name": "marker",
  "contract_version": "2.3.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create"
        ],
        "properties": {
          "create": {
            "type": "object",
            "required": [
              "allow_forced_transfer",
              "denom",
              "supply"
            ],
            "properties": {
              "allow_forced_transfer": {
                "type": "boolean"
              },
              "denom": {
                "type": "string"
              },
              "supply": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "grant_access"
        ],
        "properties": {
          "grant_access": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "finalize"
        ],
        "properties": {
          "finalize": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "activate"
        ],
        "properties": {
          "activate": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel"
        ],
        "properties": {
          "cancel": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "destroy"
        ],
        "properties": {
          "destroy": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transfer"
        ],
        "properties": {
          "transfer": {
            "type": "object",
            "required": [
              "amount",
              "denom",
              "to"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              },
              "to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_by_address"
        ],
        "properties": {
          "get_by_address": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_by_denom"
        ],
        "properties": {
          "get_by_denom": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_by_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Marker",
      "type": "object",
      "required": [
        "coins",
        "marker_account"
      ],
      "properties": {
        "coins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "marker_account": {
          "$ref": "#/definitions/MarkerAccount"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccessGrant": {
          "description": "AccessGrant associates a collection of permissions with an address for delegated marker account control.",
          "type": "object",
          "required": [
            "address",
            "permissions"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "Any": {
          "type": "object",
          "required": [
            "type_url",
            "value"
          ],
          "properties": {
            "type_url": {
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a \\[google.protobuf.Type][\\] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)\n\nNote: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.",
              "type": "string"
            },
            "value": {
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "BaseAccount": {
          "description": "BaseAccount defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting).",
          "type": "object",
          "required": [
            "account_number",
            "address",
            "sequence"
          ],
          "properties": {
            "account_number": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "address": {
              "type": "string"
            },
            "pub_key": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Any"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sequence": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "MarkerAccount": {
          "description": "MarkerAccount holds the marker configuration information in addition to a base account structure.",
          "type": "object",
          "required": [
            "access_control",
            "allow_forced_transfer",
            "allow_governance_control",
            "denom",
            "manager",
            "marker_type",
            "required_attributes",
            "status",
            "supply",
            "supply_fixed"
          ],
          "properties": {
            "access_control": {
              "description": "Access control lists",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessGrant"
              }
            },
            "allow_forced_transfer": {
              "description": "Whether an admin can transfer restricted coins from a 3rd-party account without their signature.",
              "type": "boolean"
            },
            "allow_governance_control": {
              "description": "indicates that governance based control is allowed for this marker",
              "type": "boolean"
            },
            "base_account": {
              "description": "base cosmos account information including address and coin holdings.",
              "anyOf": [
                {
                  "$ref": "#/definitions/BaseAccount"
                },
                {
                  "type": "null"
                }
              ]
            },
            "denom": {
              "description": "value denomination and total supply for the token.",
              "type": "string"
            },
            "manager": {
              "description": "Address that owns the marker configuration.  This account must sign any requests to change marker config (only valid for statuses prior to finalization)",
              "type": "string"
            },
            "marker_type": {
              "description": "Marker type information",
              "type": "integer",
              "format": "int32"
            },
            "required_attributes": {
              "description": "list of required attributes on restricted marker in order to send and receive transfers if sender does not have transfer authority",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "description": "Indicates the current status of this marker record.",
              "type": "integer",
              "format": "int32"
            },
            "supply": {
              "description": "the total supply expected for a marker.  This is the amount that is minted when a marker is created.",
              "type": "string"
            },
            "supply_fixed": {
              "description": "A fixed supply will mint additional coin automatically if the total supply decreases below a set value.  This may occur if the coin is burned or an account holding the coin is slashed. (default: true)",
              "type": "boolean"
            }
          }
        }
      }
    },
    "get_by_denom": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Marker",
      "type": "object",
      "required": [
        "coins",
        "marker_account"
      ],
      "properties": {
        "coins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "marker_account": {
          "$ref": "#/definitions/MarkerAccount"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccessGrant": {
          "description": "AccessGrant associates a collection of permissions with an address for delegated marker account control.",
          "type": "object",
          "required": [
            "address",
            "permissions"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "Any": {
          "type": "object",
          "required": [
            "type_url",
            "value"
          ],
          "properties": {
            "type_url": {
              "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a \\[google.protobuf.Type][\\] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.)\n\nNote: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.",
              "type": "string"
            },
            "value": {
              "description": "Must be a valid serialized protocol buffer of the above specified type.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "BaseAccount": {
          "description": "BaseAccount defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting).",
          "type": "object",
          "required": [
            "account_number",
            "address",
            "sequence"
          ],
          "properties": {
            "account_number": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "address": {
              "type": "string"
            },
            "pub_key": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Any"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sequence": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "MarkerAccount": {
          "description": "MarkerAccount holds the marker configuration information in addition to a base account structure.",
          "type": "object",
          "required": [
            "access_control",
            "allow_forced_transfer",
            "allow_governance_control",
            "denom",
            "manager",
            "marker_type",
            "required_attributes",
            "status",
            "supply",
            "supply_fixed"
          ],
          "properties": {
            "access_control": {
              "description": "Access control lists",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessGrant"
              }
            },
            "allow_forced_transfer": {
              "description": "Whether an admin can transfer restricted coins from a 3rd-party account without their signature.",
              "type": "boolean"
            },
            "allow_governance_control": {
              "description": "indicates that governance based control is allowed for this marker",
              "type": "boolean"
            },
            "base_account": {
              "description": "base cosmos account information including address and coin holdings.",
              "anyOf": [
                {
                  "$ref": "#/definitions/BaseAccount"
                },
                {
                  "type": "null"
                }
              ]
            },
            "denom": {
              "description": "value denomination and total supply for the token.",
              "type": "string"
            },
            "manager": {
              "description": "Address that owns the marker configuration.  This account must sign any requests to change marker config (only valid for statuses prior to finalization)",
              "type": "string"
            },
            "marker_type": {
              "description": "Marker type information",
              "type": "integer",
              "format": "int32"
            },
            "required_attributes": {
              "description": "list of required attributes on restricted marker in order to send and receive transfers if sender does not have transfer authority",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "description": "Indicates the current status of this marker record.",
              "type": "integer",
              "format": "int32"
            },
            "supply": {
              "description": "the total supply expected for a marker.  This is the amount that is minted when a marker is created.",
              "type": "string"
            },
            "supply_fixed": {
              "description": "A fixed supply will mint additional coin automatically if the total supply decreases below a set value.  This may occur if the coin is burned or an account holding the coin is slashed. (default: true)",
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}
