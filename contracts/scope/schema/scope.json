{
  "contract_name": "scope",
  "contract_version": "2.3.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "name"
    ],
    "properties": {
      "name": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "write_scope"
        ],
        "properties": {
          "write_scope": {
            "type": "object",
            "required": [
              "scope",
              "signers"
            ],
            "properties": {
              "scope": {
                "$ref": "#/definitions/Scope"
              },
              "signers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Party": {
        "description": "A Party is an address with/in a given role associated with a contract",
        "type": "object",
        "required": [
          "address",
          "optional",
          "role"
        ],
        "properties": {
          "address": {
            "description": "address of the account (on chain)",
            "type": "string"
          },
          "optional": {
            "description": "whether this party's signature is optional",
            "type": "boolean"
          },
          "role": {
            "description": "a role for this account within the context of the processes used",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Scope": {
        "description": "Scope defines a root reference for a collection of records owned by one or more parties.",
        "type": "object",
        "required": [
          "data_access",
          "owners",
          "require_party_rollup",
          "scope_id",
          "specification_id",
          "value_owner_address"
        ],
        "properties": {
          "data_access": {
            "description": "Addresses in this list are authorized to receive off-chain data associated with this scope.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owners": {
            "description": "These parties represent top level owners of the records within.  These parties must sign any requests that modify the data within the scope.  These addresses are in union with parties listed on the sessions.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Party"
            }
          },
          "require_party_rollup": {
            "description": "Whether all parties in this scope and its sessions must be present in this scope's owners field. This also enables use of optional=true scope owners and session parties.",
            "type": "boolean"
          },
          "scope_id": {
            "description": "Unique ID for this scope.  Implements sdk.Address interface for use where addresses are required in Cosmos",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "specification_id": {
            "description": "the scope specification that contains the specifications for data elements allowed within this scope",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "value_owner_address": {
            "description": "An address that controls the value associated with this scope.  Standard blockchain accounts and marker accounts are supported for this value.  This attribute may only be changed by the entity indicated once it is set.",
            "type": "string"
          }
        }
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_contract_spec"
        ],
        "properties": {
          "get_contract_spec": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_scope"
        ],
        "properties": {
          "get_scope": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_sessions"
        ],
        "properties": {
          "get_sessions": {
            "type": "object",
            "required": [
              "scope_id"
            ],
            "properties": {
              "scope_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_records"
        ],
        "properties": {
          "get_records": {
            "type": "object",
            "required": [
              "scope_id"
            ],
            "properties": {
              "scope_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_record_by_name"
        ],
        "properties": {
          "get_record_by_name": {
            "type": "object",
            "required": [
              "name",
              "scope_id"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "scope_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_contract_spec": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractSpecificationResponse",
      "description": "ContractSpecificationResponse is the response type for the Query/ContractSpecification RPC method.",
      "type": "object",
      "required": [
        "record_specifications"
      ],
      "properties": {
        "contract_specification": {
          "description": "contract_specification is the wrapped contract specification.",
          "anyOf": [
            {
              "$ref": "#/definitions/ContractSpecificationWrapper"
            },
            {
              "type": "null"
            }
          ]
        },
        "record_specifications": {
          "description": "record_specifications is any number or wrapped record specifications associated with this contract_specification (if requested).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordSpecificationWrapper"
          }
        },
        "request": {
          "description": "request is a copy of the request that generated these results.",
          "anyOf": [
            {
              "$ref": "#/definitions/ContractSpecificationRequest"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "definitions": {
        "ContractSpecIdInfo": {
          "description": "ContractSpecIdInfo contains various info regarding a contract specification id.",
          "type": "object",
          "required": [
            "contract_spec_addr",
            "contract_spec_id",
            "contract_spec_id_contract_spec_uuid",
            "contract_spec_id_prefix",
            "contract_spec_uuid"
          ],
          "properties": {
            "contract_spec_addr": {
              "description": "contract_spec_addr is the bech32 string version of the contract_spec_id.",
              "type": "string"
            },
            "contract_spec_id": {
              "description": "contract_spec_id is the raw bytes of the contract specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_contract_spec_uuid": {
              "description": "contract_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_prefix": {
              "description": "contract_spec_id_prefix is the prefix portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_uuid": {
              "description": "contract_spec_uuid is the uuid hex string of the contract_spec_id_contract_spec_uuid.",
              "type": "string"
            }
          }
        },
        "ContractSpecification": {
          "description": "ContractSpecification defines the required parties, resources, conditions, and consideration outputs for a contract",
          "type": "object",
          "required": [
            "class_name",
            "owner_addresses",
            "parties_involved",
            "specification_id"
          ],
          "properties": {
            "class_name": {
              "description": "name of the class/type of this contract executable",
              "type": "string"
            },
            "description": {
              "description": "Description information for this contract specification",
              "anyOf": [
                {
                  "$ref": "#/definitions/Description"
                },
                {
                  "type": "null"
                }
              ]
            },
            "owner_addresses": {
              "description": "Address of the account that owns this specificaiton",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "parties_involved": {
              "description": "a list of party roles that must be fullfilled when signing a transaction for this contract specification",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "source": {
              "description": "Reference to a metadata record with a hash and type information for the instance of code that will process this contract",
              "anyOf": [
                {
                  "$ref": "#/definitions/Source"
                },
                {
                  "type": "null"
                }
              ]
            },
            "specification_id": {
              "description": "unique identifier for this specification on chain",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "ContractSpecificationRequest": {
          "description": "ContractSpecificationRequest is the request type for the Query/ContractSpecification RPC method.",
          "type": "object",
          "required": [
            "exclude_id_info",
            "include_record_specs",
            "include_request",
            "specification_id"
          ],
          "properties": {
            "exclude_id_info": {
              "description": "exclude_id_info is a flag for whether to exclude the id info from the response.",
              "type": "boolean"
            },
            "include_record_specs": {
              "description": "include_record_specs is a flag for whether to include the the record specifications of this contract specification in the response.",
              "type": "boolean"
            },
            "include_request": {
              "description": "include_request is a flag for whether to include this request in your result.",
              "type": "boolean"
            },
            "specification_id": {
              "description": "specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84 or a bech32 contract specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn. It can also be a record specification address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44.",
              "type": "string"
            }
          }
        },
        "ContractSpecificationWrapper": {
          "description": "ContractSpecificationWrapper contains a single contract specification and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info contains information about the id/address of the contract specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "specification": {
              "description": "specification is the on-chain contract specification message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecification"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Description": {
          "description": "Description holds general information that is handy to associate with a structure.",
          "type": "object",
          "required": [
            "description",
            "icon_url",
            "name",
            "website_url"
          ],
          "properties": {
            "description": {
              "description": "A description of this thing.",
              "type": "string"
            },
            "icon_url": {
              "description": "URL of an icon.",
              "type": "string"
            },
            "name": {
              "description": "A Name for this thing.",
              "type": "string"
            },
            "website_url": {
              "description": "URL to find even more info.",
              "type": "string"
            }
          }
        },
        "InputSpecification": {
          "description": "InputSpecification defines a name, type_name, and source reference (either on or off chain) to define an input parameter",
          "type": "object",
          "required": [
            "name",
            "type_name"
          ],
          "properties": {
            "name": {
              "description": "name for this input",
              "type": "string"
            },
            "source": {
              "description": "source is either on chain (record_id) or off-chain (hash)",
              "anyOf": [
                {
                  "$ref": "#/definitions/Source2"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type_name": {
              "description": "a type_name (typically a proto name or class_name)",
              "type": "string"
            }
          }
        },
        "RecordSpecIdInfo": {
          "description": "RecordSpecIdInfo contains various info regarding a record specification id.",
          "type": "object",
          "required": [
            "record_spec_addr",
            "record_spec_id",
            "record_spec_id_contract_spec_uuid",
            "record_spec_id_hashed_name",
            "record_spec_id_prefix"
          ],
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info is information about the contract spec id referenced in the record_spec_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_addr": {
              "description": "record_spec_addr is the bech32 string version of the record_spec_id.",
              "type": "string"
            },
            "record_spec_id": {
              "description": "record_spec_id is the raw bytes of the record specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_contract_spec_uuid": {
              "description": "record_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_hashed_name": {
              "description": "record_spec_id_hashed_name is the hashed name portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_prefix": {
              "description": "record_spec_id_prefix is the prefix portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordSpecification": {
          "description": "RecordSpecification defines the specification for a Record including allowed/required inputs/outputs",
          "type": "object",
          "required": [
            "inputs",
            "name",
            "responsible_parties",
            "result_type",
            "specification_id",
            "type_name"
          ],
          "properties": {
            "inputs": {
              "description": "A set of inputs that must be satisified to apply this RecordSpecification and create a Record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/InputSpecification"
              }
            },
            "name": {
              "description": "Name of Record that will be created when this specification is used",
              "type": "string"
            },
            "responsible_parties": {
              "description": "Type of party responsible for this record",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "result_type": {
              "description": "Type of result for this record specification (must be RECORD or RECORD_LIST)",
              "type": "integer",
              "format": "int32"
            },
            "specification_id": {
              "description": "unique identifier for this specification on chain",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "type_name": {
              "description": "A type name for data associated with this record (typically a class or proto name)",
              "type": "string"
            }
          }
        },
        "RecordSpecificationWrapper": {
          "description": "RecordSpecificationWrapper contains a single record specification and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "record_spec_id_info": {
              "description": "record_spec_id_info contains information about the id/address of the record specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "specification": {
              "description": "specification is the on-chain record specification message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordSpecification"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Source": {
          "description": "Reference to a metadata record with a hash and type information for the instance of code that will process this contract",
          "oneOf": [
            {
              "description": "the address of a record on chain that represents this contract",
              "type": "object",
              "required": [
                "ResourceId"
              ],
              "properties": {
                "ResourceId": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of contract binary (off-chain instance)",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Source2": {
          "description": "source is either on chain (record_id) or off-chain (hash)",
          "oneOf": [
            {
              "description": "the address of a record on chain (For Established Records)",
              "type": "object",
              "required": [
                "RecordId"
              ],
              "properties": {
                "RecordId": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain piece of information (For Proposed Records)",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "get_record_by_name": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RecordsResponse",
      "description": "RecordsResponse is the response type for the Query/Records RPC method.",
      "type": "object",
      "required": [
        "records",
        "sessions"
      ],
      "properties": {
        "records": {
          "description": "records is any number of wrapped record results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordWrapper"
          }
        },
        "request": {
          "description": "request is a copy of the request that generated these results.",
          "anyOf": [
            {
              "$ref": "#/definitions/RecordsRequest"
            },
            {
              "type": "null"
            }
          ]
        },
        "scope": {
          "description": "scope is the wrapped scope that holds these records (if requested).",
          "anyOf": [
            {
              "$ref": "#/definitions/ScopeWrapper"
            },
            {
              "type": "null"
            }
          ]
        },
        "sessions": {
          "description": "sessions is any number of wrapped sessions that hold these records (if requested).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SessionWrapper"
          }
        }
      },
      "definitions": {
        "AuditFields": {
          "description": "AuditFields capture information about the last account to make modifications and when they were made",
          "type": "object",
          "required": [
            "created_by",
            "message",
            "updated_by",
            "version"
          ],
          "properties": {
            "created_by": {
              "description": "the address of the account that created this record",
              "type": "string"
            },
            "created_date": {
              "description": "the date/time when this entry was created",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "message": {
              "description": "an optional message associated with the creation/update event",
              "type": "string"
            },
            "updated_by": {
              "description": "the address of the account that modified this record",
              "type": "string"
            },
            "updated_date": {
              "description": "the date/time when this entry was last updated",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "version": {
              "description": "an optional version number that is incremented with each update",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        "ContractSpecIdInfo": {
          "description": "ContractSpecIdInfo contains various info regarding a contract specification id.",
          "type": "object",
          "required": [
            "contract_spec_addr",
            "contract_spec_id",
            "contract_spec_id_contract_spec_uuid",
            "contract_spec_id_prefix",
            "contract_spec_uuid"
          ],
          "properties": {
            "contract_spec_addr": {
              "description": "contract_spec_addr is the bech32 string version of the contract_spec_id.",
              "type": "string"
            },
            "contract_spec_id": {
              "description": "contract_spec_id is the raw bytes of the contract specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_contract_spec_uuid": {
              "description": "contract_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_prefix": {
              "description": "contract_spec_id_prefix is the prefix portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_uuid": {
              "description": "contract_spec_uuid is the uuid hex string of the contract_spec_id_contract_spec_uuid.",
              "type": "string"
            }
          }
        },
        "Party": {
          "description": "A Party is an address with/in a given role associated with a contract",
          "type": "object",
          "required": [
            "address",
            "optional",
            "role"
          ],
          "properties": {
            "address": {
              "description": "address of the account (on chain)",
              "type": "string"
            },
            "optional": {
              "description": "whether this party's signature is optional",
              "type": "boolean"
            },
            "role": {
              "description": "a role for this account within the context of the processes used",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "Process": {
          "description": "Process contains information used to uniquely identify what was used to generate this record",
          "type": "object",
          "required": [
            "method",
            "name"
          ],
          "properties": {
            "method": {
              "description": "method is a name or reference to a specific operation (method) within a class/contract that was invoked",
              "type": "string"
            },
            "name": {
              "description": "a name associated with the process (type_name, classname or smart contract common name)",
              "type": "string"
            },
            "process_id": {
              "description": "unique identifier for this process",
              "anyOf": [
                {
                  "$ref": "#/definitions/ProcessId"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "ProcessId": {
          "description": "unique identifier for this process",
          "oneOf": [
            {
              "description": "the address of a smart contract used for this process",
              "type": "object",
              "required": [
                "Address"
              ],
              "properties": {
                "Address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain process used",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Record": {
          "description": "A record (of fact) is attached to a session or each consideration output from a contract",
          "type": "object",
          "required": [
            "inputs",
            "name",
            "outputs",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "inputs": {
              "description": "inputs used with the process to achieve the output on this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordInput"
              }
            },
            "name": {
              "description": "name/identifier for this record.  Value must be unique within the scope.  Also known as a Fact name",
              "type": "string"
            },
            "outputs": {
              "description": "output(s) is the results of executing the process on the given process indicated in this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordOutput"
              }
            },
            "process": {
              "description": "process contain information used to uniquely identify an execution on or off chain that generated this record",
              "anyOf": [
                {
                  "$ref": "#/definitions/Process"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id": {
              "description": "id of the session context that was used to create this record (use with filtered kvprefix iterator)",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "specification_id is the id of the record specification that was used to create this record.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordIdInfo": {
          "description": "RecordIdInfo contains various info regarding a record id.",
          "type": "object",
          "required": [
            "record_addr",
            "record_id",
            "record_id_hashed_name",
            "record_id_prefix",
            "record_id_scope_uuid"
          ],
          "properties": {
            "record_addr": {
              "description": "record_addr is the bech32 string version of the record_id.",
              "type": "string"
            },
            "record_id": {
              "description": "record_id is the raw bytes of the record address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_hashed_name": {
              "description": "record_id_hashed_name is the hashed name portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_prefix": {
              "description": "record_id_prefix is the prefix portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_scope_uuid": {
              "description": "record_id_scope_uuid is the scope_uuid portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the record_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "RecordInput": {
          "description": "Tracks the inputs used to establish this record",
          "type": "object",
          "required": [
            "name",
            "status",
            "type_name"
          ],
          "properties": {
            "name": {
              "description": "Name value included to link back to the definition spec.",
              "type": "string"
            },
            "source": {
              "description": "data source",
              "anyOf": [
                {
                  "$ref": "#/definitions/Source"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "description": "Indicates if this input was a recorded fact on chain or just a given hashed input",
              "type": "integer",
              "format": "int32"
            },
            "type_name": {
              "description": "from proposed fact structure to unmarshal",
              "type": "string"
            }
          }
        },
        "RecordOutput": {
          "description": "RecordOutput encapsulates the output of a process recorded on chain",
          "type": "object",
          "required": [
            "hash",
            "status"
          ],
          "properties": {
            "hash": {
              "description": "Hash of the data output that was output/generated for this record",
              "type": "string"
            },
            "status": {
              "description": "Status of the process execution associated with this output indicating success,failure, or pending",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "RecordSpecIdInfo": {
          "description": "RecordSpecIdInfo contains various info regarding a record specification id.",
          "type": "object",
          "required": [
            "record_spec_addr",
            "record_spec_id",
            "record_spec_id_contract_spec_uuid",
            "record_spec_id_hashed_name",
            "record_spec_id_prefix"
          ],
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info is information about the contract spec id referenced in the record_spec_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_addr": {
              "description": "record_spec_addr is the bech32 string version of the record_spec_id.",
              "type": "string"
            },
            "record_spec_id": {
              "description": "record_spec_id is the raw bytes of the record specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_contract_spec_uuid": {
              "description": "record_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_hashed_name": {
              "description": "record_spec_id_hashed_name is the hashed name portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_prefix": {
              "description": "record_spec_id_prefix is the prefix portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordWrapper": {
          "description": "RecordWrapper contains a single record and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "record": {
              "description": "record is the on-chain record message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Record"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_id_info": {
              "description": "record_id_info contains information about the id/address of the record.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_id_info": {
              "description": "record_spec_id_info contains information about the id/address of the record specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "RecordsRequest": {
          "description": "RecordsRequest is the request type for the Query/Records RPC method.",
          "type": "object",
          "required": [
            "exclude_id_info",
            "include_request",
            "include_scope",
            "include_sessions",
            "name",
            "record_addr",
            "scope_id",
            "session_id"
          ],
          "properties": {
            "exclude_id_info": {
              "description": "exclude_id_info is a flag for whether to exclude the id info from the response.",
              "type": "boolean"
            },
            "include_request": {
              "description": "include_request is a flag for whether to include this request in your result.",
              "type": "boolean"
            },
            "include_scope": {
              "description": "include_scope is a flag for whether to include the the scope containing these records in the response.",
              "type": "boolean"
            },
            "include_sessions": {
              "description": "include_sessions is a flag for whether to include the sessions containing these records in the response.",
              "type": "boolean"
            },
            "name": {
              "description": "name is the name of the record to look for",
              "type": "string"
            },
            "record_addr": {
              "description": "record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.",
              "type": "string"
            },
            "session_id": {
              "description": "session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also provided.",
              "type": "string"
            }
          }
        },
        "Scope": {
          "description": "Scope defines a root reference for a collection of records owned by one or more parties.",
          "type": "object",
          "required": [
            "data_access",
            "owners",
            "require_party_rollup",
            "scope_id",
            "specification_id",
            "value_owner_address"
          ],
          "properties": {
            "data_access": {
              "description": "Addresses in this list are authorized to receive off-chain data associated with this scope.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "owners": {
              "description": "These parties represent top level owners of the records within.  These parties must sign any requests that modify the data within the scope.  These addresses are in union with parties listed on the sessions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "require_party_rollup": {
              "description": "Whether all parties in this scope and its sessions must be present in this scope's owners field. This also enables use of optional=true scope owners and session parties.",
              "type": "boolean"
            },
            "scope_id": {
              "description": "Unique ID for this scope.  Implements sdk.Address interface for use where addresses are required in Cosmos",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "the scope specification that contains the specifications for data elements allowed within this scope",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "value_owner_address": {
              "description": "An address that controls the value associated with this scope.  Standard blockchain accounts and marker accounts are supported for this value.  This attribute may only be changed by the entity indicated once it is set.",
              "type": "string"
            }
          }
        },
        "ScopeIdInfo": {
          "description": "ScopeIdInfo contains various info regarding a scope id.",
          "type": "object",
          "required": [
            "scope_addr",
            "scope_id",
            "scope_id_prefix",
            "scope_id_scope_uuid",
            "scope_uuid"
          ],
          "properties": {
            "scope_addr": {
              "description": "scope_addr is the bech32 string version of the scope_id.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id is the raw bytes of the scope address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_prefix": {
              "description": "scope_id_prefix is the prefix portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_scope_uuid": {
              "description": "scope_id_scope_uuid is the scope_uuid portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_uuid": {
              "description": "scope_uuid is the uuid hex string of the scope_id_scope_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeSpecIdInfo": {
          "description": "ScopeSpecIdInfo contains various info regarding a scope specification id.",
          "type": "object",
          "required": [
            "scope_spec_addr",
            "scope_spec_id",
            "scope_spec_id_prefix",
            "scope_spec_id_scope_spec_uuid",
            "scope_spec_uuid"
          ],
          "properties": {
            "scope_spec_addr": {
              "description": "scope_spec_addr is the bech32 string version of the scope_spec_id.",
              "type": "string"
            },
            "scope_spec_id": {
              "description": "scope_spec_id is the raw bytes of the scope specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_prefix": {
              "description": "scope_spec_id_prefix is the prefix portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_scope_spec_uuid": {
              "description": "scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_uuid": {
              "description": "scope_spec_uuid is the uuid hex string of the scope_spec_id_scope_spec_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeWrapper": {
          "description": "SessionWrapper contains a single scope and its uuid.",
          "type": "object",
          "properties": {
            "scope": {
              "description": "scope is the on-chain scope message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Scope"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_id_info": {
              "description": "scope_id_info contains information about the id/address of the scope.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_spec_id_info": {
              "description": "scope_spec_id_info contains information about the id/address of the scope specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Session": {
          "description": "Session defines an execution context against a specific specification instance. The context will have a specification and set of parties involved.\n\nNOTE: When there are no more Records within a Scope that reference a Session, the Session is removed.",
          "type": "object",
          "required": [
            "context",
            "name",
            "parties",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "audit": {
              "description": "Created by, updated by, timestamps, version number, and related info.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AuditFields"
                },
                {
                  "type": "null"
                }
              ]
            },
            "context": {
              "description": "context is a field for storing client specific data associated with a session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "name": {
              "description": "name to associate with this session execution context, typically classname",
              "type": "string"
            },
            "parties": {
              "description": "parties is the set of identities that signed this contract",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "session_id": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "unique id of the contract specification that was used to create this session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "SessionIdInfo": {
          "description": "SessionIdInfo contains various info regarding a session id.",
          "type": "object",
          "required": [
            "session_addr",
            "session_id",
            "session_id_prefix",
            "session_id_scope_uuid",
            "session_id_session_uuid",
            "session_uuid"
          ],
          "properties": {
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the session_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_addr": {
              "description": "session_addr is the bech32 string version of the session_id.",
              "type": "string"
            },
            "session_id": {
              "description": "session_id is the raw bytes of the session address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_prefix": {
              "description": "session_id_prefix is the prefix portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_scope_uuid": {
              "description": "session_id_scope_uuid is the scope_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_session_uuid": {
              "description": "session_id_session_uuid is the session_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_uuid": {
              "description": "session_uuid is the uuid hex string of the session_id_session_uuid.",
              "type": "string"
            }
          }
        },
        "SessionWrapper": {
          "description": "SessionWrapper contains a single session and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info contains information about the id/address of the contract specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session": {
              "description": "session is the on-chain session message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Session"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id_info": {
              "description": "session_id_info contains information about the id/address of the session.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SessionIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Source": {
          "description": "data source",
          "oneOf": [
            {
              "description": "the address of a record on chain (For Established Records)",
              "type": "object",
              "required": [
                "RecordId"
              ],
              "properties": {
                "RecordId": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain piece of information (For Proposed Records)",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "type": "object",
          "required": [
            "nanos",
            "seconds"
          ],
          "properties": {
            "nanos": {
              "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
              "type": "integer",
              "format": "int32"
            },
            "seconds": {
              "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "get_records": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_RecordsResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/RecordsResponse"
      },
      "definitions": {
        "AuditFields": {
          "description": "AuditFields capture information about the last account to make modifications and when they were made",
          "type": "object",
          "required": [
            "created_by",
            "message",
            "updated_by",
            "version"
          ],
          "properties": {
            "created_by": {
              "description": "the address of the account that created this record",
              "type": "string"
            },
            "created_date": {
              "description": "the date/time when this entry was created",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "message": {
              "description": "an optional message associated with the creation/update event",
              "type": "string"
            },
            "updated_by": {
              "description": "the address of the account that modified this record",
              "type": "string"
            },
            "updated_date": {
              "description": "the date/time when this entry was last updated",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "version": {
              "description": "an optional version number that is incremented with each update",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        "ContractSpecIdInfo": {
          "description": "ContractSpecIdInfo contains various info regarding a contract specification id.",
          "type": "object",
          "required": [
            "contract_spec_addr",
            "contract_spec_id",
            "contract_spec_id_contract_spec_uuid",
            "contract_spec_id_prefix",
            "contract_spec_uuid"
          ],
          "properties": {
            "contract_spec_addr": {
              "description": "contract_spec_addr is the bech32 string version of the contract_spec_id.",
              "type": "string"
            },
            "contract_spec_id": {
              "description": "contract_spec_id is the raw bytes of the contract specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_contract_spec_uuid": {
              "description": "contract_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_prefix": {
              "description": "contract_spec_id_prefix is the prefix portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_uuid": {
              "description": "contract_spec_uuid is the uuid hex string of the contract_spec_id_contract_spec_uuid.",
              "type": "string"
            }
          }
        },
        "Party": {
          "description": "A Party is an address with/in a given role associated with a contract",
          "type": "object",
          "required": [
            "address",
            "optional",
            "role"
          ],
          "properties": {
            "address": {
              "description": "address of the account (on chain)",
              "type": "string"
            },
            "optional": {
              "description": "whether this party's signature is optional",
              "type": "boolean"
            },
            "role": {
              "description": "a role for this account within the context of the processes used",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "Process": {
          "description": "Process contains information used to uniquely identify what was used to generate this record",
          "type": "object",
          "required": [
            "method",
            "name"
          ],
          "properties": {
            "method": {
              "description": "method is a name or reference to a specific operation (method) within a class/contract that was invoked",
              "type": "string"
            },
            "name": {
              "description": "a name associated with the process (type_name, classname or smart contract common name)",
              "type": "string"
            },
            "process_id": {
              "description": "unique identifier for this process",
              "anyOf": [
                {
                  "$ref": "#/definitions/ProcessId"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "ProcessId": {
          "description": "unique identifier for this process",
          "oneOf": [
            {
              "description": "the address of a smart contract used for this process",
              "type": "object",
              "required": [
                "Address"
              ],
              "properties": {
                "Address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain process used",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Record": {
          "description": "A record (of fact) is attached to a session or each consideration output from a contract",
          "type": "object",
          "required": [
            "inputs",
            "name",
            "outputs",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "inputs": {
              "description": "inputs used with the process to achieve the output on this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordInput"
              }
            },
            "name": {
              "description": "name/identifier for this record.  Value must be unique within the scope.  Also known as a Fact name",
              "type": "string"
            },
            "outputs": {
              "description": "output(s) is the results of executing the process on the given process indicated in this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordOutput"
              }
            },
            "process": {
              "description": "process contain information used to uniquely identify an execution on or off chain that generated this record",
              "anyOf": [
                {
                  "$ref": "#/definitions/Process"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id": {
              "description": "id of the session context that was used to create this record (use with filtered kvprefix iterator)",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "specification_id is the id of the record specification that was used to create this record.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordIdInfo": {
          "description": "RecordIdInfo contains various info regarding a record id.",
          "type": "object",
          "required": [
            "record_addr",
            "record_id",
            "record_id_hashed_name",
            "record_id_prefix",
            "record_id_scope_uuid"
          ],
          "properties": {
            "record_addr": {
              "description": "record_addr is the bech32 string version of the record_id.",
              "type": "string"
            },
            "record_id": {
              "description": "record_id is the raw bytes of the record address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_hashed_name": {
              "description": "record_id_hashed_name is the hashed name portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_prefix": {
              "description": "record_id_prefix is the prefix portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_scope_uuid": {
              "description": "record_id_scope_uuid is the scope_uuid portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the record_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "RecordInput": {
          "description": "Tracks the inputs used to establish this record",
          "type": "object",
          "required": [
            "name",
            "status",
            "type_name"
          ],
          "properties": {
            "name": {
              "description": "Name value included to link back to the definition spec.",
              "type": "string"
            },
            "source": {
              "description": "data source",
              "anyOf": [
                {
                  "$ref": "#/definitions/Source"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "description": "Indicates if this input was a recorded fact on chain or just a given hashed input",
              "type": "integer",
              "format": "int32"
            },
            "type_name": {
              "description": "from proposed fact structure to unmarshal",
              "type": "string"
            }
          }
        },
        "RecordOutput": {
          "description": "RecordOutput encapsulates the output of a process recorded on chain",
          "type": "object",
          "required": [
            "hash",
            "status"
          ],
          "properties": {
            "hash": {
              "description": "Hash of the data output that was output/generated for this record",
              "type": "string"
            },
            "status": {
              "description": "Status of the process execution associated with this output indicating success,failure, or pending",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "RecordSpecIdInfo": {
          "description": "RecordSpecIdInfo contains various info regarding a record specification id.",
          "type": "object",
          "required": [
            "record_spec_addr",
            "record_spec_id",
            "record_spec_id_contract_spec_uuid",
            "record_spec_id_hashed_name",
            "record_spec_id_prefix"
          ],
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info is information about the contract spec id referenced in the record_spec_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_addr": {
              "description": "record_spec_addr is the bech32 string version of the record_spec_id.",
              "type": "string"
            },
            "record_spec_id": {
              "description": "record_spec_id is the raw bytes of the record specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_contract_spec_uuid": {
              "description": "record_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_hashed_name": {
              "description": "record_spec_id_hashed_name is the hashed name portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_prefix": {
              "description": "record_spec_id_prefix is the prefix portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordWrapper": {
          "description": "RecordWrapper contains a single record and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "record": {
              "description": "record is the on-chain record message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Record"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_id_info": {
              "description": "record_id_info contains information about the id/address of the record.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_id_info": {
              "description": "record_spec_id_info contains information about the id/address of the record specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "RecordsRequest": {
          "description": "RecordsRequest is the request type for the Query/Records RPC method.",
          "type": "object",
          "required": [
            "exclude_id_info",
            "include_request",
            "include_scope",
            "include_sessions",
            "name",
            "record_addr",
            "scope_id",
            "session_id"
          ],
          "properties": {
            "exclude_id_info": {
              "description": "exclude_id_info is a flag for whether to exclude the id info from the response.",
              "type": "boolean"
            },
            "include_request": {
              "description": "include_request is a flag for whether to include this request in your result.",
              "type": "boolean"
            },
            "include_scope": {
              "description": "include_scope is a flag for whether to include the the scope containing these records in the response.",
              "type": "boolean"
            },
            "include_sessions": {
              "description": "include_sessions is a flag for whether to include the sessions containing these records in the response.",
              "type": "boolean"
            },
            "name": {
              "description": "name is the name of the record to look for",
              "type": "string"
            },
            "record_addr": {
              "description": "record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.",
              "type": "string"
            },
            "session_id": {
              "description": "session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also provided.",
              "type": "string"
            }
          }
        },
        "RecordsResponse": {
          "description": "RecordsResponse is the response type for the Query/Records RPC method.",
          "type": "object",
          "required": [
            "records",
            "sessions"
          ],
          "properties": {
            "records": {
              "description": "records is any number of wrapped record results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordWrapper"
              }
            },
            "request": {
              "description": "request is a copy of the request that generated these results.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordsRequest"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope": {
              "description": "scope is the wrapped scope that holds these records (if requested).",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeWrapper"
                },
                {
                  "type": "null"
                }
              ]
            },
            "sessions": {
              "description": "sessions is any number of wrapped sessions that hold these records (if requested).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SessionWrapper"
              }
            }
          }
        },
        "Scope": {
          "description": "Scope defines a root reference for a collection of records owned by one or more parties.",
          "type": "object",
          "required": [
            "data_access",
            "owners",
            "require_party_rollup",
            "scope_id",
            "specification_id",
            "value_owner_address"
          ],
          "properties": {
            "data_access": {
              "description": "Addresses in this list are authorized to receive off-chain data associated with this scope.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "owners": {
              "description": "These parties represent top level owners of the records within.  These parties must sign any requests that modify the data within the scope.  These addresses are in union with parties listed on the sessions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "require_party_rollup": {
              "description": "Whether all parties in this scope and its sessions must be present in this scope's owners field. This also enables use of optional=true scope owners and session parties.",
              "type": "boolean"
            },
            "scope_id": {
              "description": "Unique ID for this scope.  Implements sdk.Address interface for use where addresses are required in Cosmos",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "the scope specification that contains the specifications for data elements allowed within this scope",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "value_owner_address": {
              "description": "An address that controls the value associated with this scope.  Standard blockchain accounts and marker accounts are supported for this value.  This attribute may only be changed by the entity indicated once it is set.",
              "type": "string"
            }
          }
        },
        "ScopeIdInfo": {
          "description": "ScopeIdInfo contains various info regarding a scope id.",
          "type": "object",
          "required": [
            "scope_addr",
            "scope_id",
            "scope_id_prefix",
            "scope_id_scope_uuid",
            "scope_uuid"
          ],
          "properties": {
            "scope_addr": {
              "description": "scope_addr is the bech32 string version of the scope_id.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id is the raw bytes of the scope address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_prefix": {
              "description": "scope_id_prefix is the prefix portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_scope_uuid": {
              "description": "scope_id_scope_uuid is the scope_uuid portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_uuid": {
              "description": "scope_uuid is the uuid hex string of the scope_id_scope_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeSpecIdInfo": {
          "description": "ScopeSpecIdInfo contains various info regarding a scope specification id.",
          "type": "object",
          "required": [
            "scope_spec_addr",
            "scope_spec_id",
            "scope_spec_id_prefix",
            "scope_spec_id_scope_spec_uuid",
            "scope_spec_uuid"
          ],
          "properties": {
            "scope_spec_addr": {
              "description": "scope_spec_addr is the bech32 string version of the scope_spec_id.",
              "type": "string"
            },
            "scope_spec_id": {
              "description": "scope_spec_id is the raw bytes of the scope specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_prefix": {
              "description": "scope_spec_id_prefix is the prefix portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_scope_spec_uuid": {
              "description": "scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_uuid": {
              "description": "scope_spec_uuid is the uuid hex string of the scope_spec_id_scope_spec_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeWrapper": {
          "description": "SessionWrapper contains a single scope and its uuid.",
          "type": "object",
          "properties": {
            "scope": {
              "description": "scope is the on-chain scope message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Scope"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_id_info": {
              "description": "scope_id_info contains information about the id/address of the scope.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_spec_id_info": {
              "description": "scope_spec_id_info contains information about the id/address of the scope specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Session": {
          "description": "Session defines an execution context against a specific specification instance. The context will have a specification and set of parties involved.\n\nNOTE: When there are no more Records within a Scope that reference a Session, the Session is removed.",
          "type": "object",
          "required": [
            "context",
            "name",
            "parties",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "audit": {
              "description": "Created by, updated by, timestamps, version number, and related info.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AuditFields"
                },
                {
                  "type": "null"
                }
              ]
            },
            "context": {
              "description": "context is a field for storing client specific data associated with a session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "name": {
              "description": "name to associate with this session execution context, typically classname",
              "type": "string"
            },
            "parties": {
              "description": "parties is the set of identities that signed this contract",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "session_id": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "unique id of the contract specification that was used to create this session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "SessionIdInfo": {
          "description": "SessionIdInfo contains various info regarding a session id.",
          "type": "object",
          "required": [
            "session_addr",
            "session_id",
            "session_id_prefix",
            "session_id_scope_uuid",
            "session_id_session_uuid",
            "session_uuid"
          ],
          "properties": {
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the session_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_addr": {
              "description": "session_addr is the bech32 string version of the session_id.",
              "type": "string"
            },
            "session_id": {
              "description": "session_id is the raw bytes of the session address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_prefix": {
              "description": "session_id_prefix is the prefix portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_scope_uuid": {
              "description": "session_id_scope_uuid is the scope_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_session_uuid": {
              "description": "session_id_session_uuid is the session_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_uuid": {
              "description": "session_uuid is the uuid hex string of the session_id_session_uuid.",
              "type": "string"
            }
          }
        },
        "SessionWrapper": {
          "description": "SessionWrapper contains a single session and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info contains information about the id/address of the contract specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session": {
              "description": "session is the on-chain session message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Session"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id_info": {
              "description": "session_id_info contains information about the id/address of the session.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SessionIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Source": {
          "description": "data source",
          "oneOf": [
            {
              "description": "the address of a record on chain (For Established Records)",
              "type": "object",
              "required": [
                "RecordId"
              ],
              "properties": {
                "RecordId": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain piece of information (For Proposed Records)",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "type": "object",
          "required": [
            "nanos",
            "seconds"
          ],
          "properties": {
            "nanos": {
              "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
              "type": "integer",
              "format": "int32"
            },
            "seconds": {
              "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "get_scope": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ScopeResponse",
      "description": "ScopeResponse is the response type for the Query/Scope RPC method.",
      "type": "object",
      "required": [
        "records",
        "sessions"
      ],
      "properties": {
        "records": {
          "description": "records is any number of wrapped records in this scope (if requested).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordWrapper"
          }
        },
        "request": {
          "description": "request is a copy of the request that generated these results.",
          "anyOf": [
            {
              "$ref": "#/definitions/ScopeRequest"
            },
            {
              "type": "null"
            }
          ]
        },
        "scope": {
          "description": "scope is the wrapped scope result.",
          "anyOf": [
            {
              "$ref": "#/definitions/ScopeWrapper"
            },
            {
              "type": "null"
            }
          ]
        },
        "sessions": {
          "description": "sessions is any number of wrapped sessions in this scope (if requested).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SessionWrapper"
          }
        }
      },
      "definitions": {
        "AuditFields": {
          "description": "AuditFields capture information about the last account to make modifications and when they were made",
          "type": "object",
          "required": [
            "created_by",
            "message",
            "updated_by",
            "version"
          ],
          "properties": {
            "created_by": {
              "description": "the address of the account that created this record",
              "type": "string"
            },
            "created_date": {
              "description": "the date/time when this entry was created",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "message": {
              "description": "an optional message associated with the creation/update event",
              "type": "string"
            },
            "updated_by": {
              "description": "the address of the account that modified this record",
              "type": "string"
            },
            "updated_date": {
              "description": "the date/time when this entry was last updated",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "version": {
              "description": "an optional version number that is incremented with each update",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        "ContractSpecIdInfo": {
          "description": "ContractSpecIdInfo contains various info regarding a contract specification id.",
          "type": "object",
          "required": [
            "contract_spec_addr",
            "contract_spec_id",
            "contract_spec_id_contract_spec_uuid",
            "contract_spec_id_prefix",
            "contract_spec_uuid"
          ],
          "properties": {
            "contract_spec_addr": {
              "description": "contract_spec_addr is the bech32 string version of the contract_spec_id.",
              "type": "string"
            },
            "contract_spec_id": {
              "description": "contract_spec_id is the raw bytes of the contract specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_contract_spec_uuid": {
              "description": "contract_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_prefix": {
              "description": "contract_spec_id_prefix is the prefix portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_uuid": {
              "description": "contract_spec_uuid is the uuid hex string of the contract_spec_id_contract_spec_uuid.",
              "type": "string"
            }
          }
        },
        "Party": {
          "description": "A Party is an address with/in a given role associated with a contract",
          "type": "object",
          "required": [
            "address",
            "optional",
            "role"
          ],
          "properties": {
            "address": {
              "description": "address of the account (on chain)",
              "type": "string"
            },
            "optional": {
              "description": "whether this party's signature is optional",
              "type": "boolean"
            },
            "role": {
              "description": "a role for this account within the context of the processes used",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "Process": {
          "description": "Process contains information used to uniquely identify what was used to generate this record",
          "type": "object",
          "required": [
            "method",
            "name"
          ],
          "properties": {
            "method": {
              "description": "method is a name or reference to a specific operation (method) within a class/contract that was invoked",
              "type": "string"
            },
            "name": {
              "description": "a name associated with the process (type_name, classname or smart contract common name)",
              "type": "string"
            },
            "process_id": {
              "description": "unique identifier for this process",
              "anyOf": [
                {
                  "$ref": "#/definitions/ProcessId"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "ProcessId": {
          "description": "unique identifier for this process",
          "oneOf": [
            {
              "description": "the address of a smart contract used for this process",
              "type": "object",
              "required": [
                "Address"
              ],
              "properties": {
                "Address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain process used",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Record": {
          "description": "A record (of fact) is attached to a session or each consideration output from a contract",
          "type": "object",
          "required": [
            "inputs",
            "name",
            "outputs",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "inputs": {
              "description": "inputs used with the process to achieve the output on this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordInput"
              }
            },
            "name": {
              "description": "name/identifier for this record.  Value must be unique within the scope.  Also known as a Fact name",
              "type": "string"
            },
            "outputs": {
              "description": "output(s) is the results of executing the process on the given process indicated in this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordOutput"
              }
            },
            "process": {
              "description": "process contain information used to uniquely identify an execution on or off chain that generated this record",
              "anyOf": [
                {
                  "$ref": "#/definitions/Process"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id": {
              "description": "id of the session context that was used to create this record (use with filtered kvprefix iterator)",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "specification_id is the id of the record specification that was used to create this record.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordIdInfo": {
          "description": "RecordIdInfo contains various info regarding a record id.",
          "type": "object",
          "required": [
            "record_addr",
            "record_id",
            "record_id_hashed_name",
            "record_id_prefix",
            "record_id_scope_uuid"
          ],
          "properties": {
            "record_addr": {
              "description": "record_addr is the bech32 string version of the record_id.",
              "type": "string"
            },
            "record_id": {
              "description": "record_id is the raw bytes of the record address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_hashed_name": {
              "description": "record_id_hashed_name is the hashed name portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_prefix": {
              "description": "record_id_prefix is the prefix portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_scope_uuid": {
              "description": "record_id_scope_uuid is the scope_uuid portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the record_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "RecordInput": {
          "description": "Tracks the inputs used to establish this record",
          "type": "object",
          "required": [
            "name",
            "status",
            "type_name"
          ],
          "properties": {
            "name": {
              "description": "Name value included to link back to the definition spec.",
              "type": "string"
            },
            "source": {
              "description": "data source",
              "anyOf": [
                {
                  "$ref": "#/definitions/Source"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "description": "Indicates if this input was a recorded fact on chain or just a given hashed input",
              "type": "integer",
              "format": "int32"
            },
            "type_name": {
              "description": "from proposed fact structure to unmarshal",
              "type": "string"
            }
          }
        },
        "RecordOutput": {
          "description": "RecordOutput encapsulates the output of a process recorded on chain",
          "type": "object",
          "required": [
            "hash",
            "status"
          ],
          "properties": {
            "hash": {
              "description": "Hash of the data output that was output/generated for this record",
              "type": "string"
            },
            "status": {
              "description": "Status of the process execution associated with this output indicating success,failure, or pending",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "RecordSpecIdInfo": {
          "description": "RecordSpecIdInfo contains various info regarding a record specification id.",
          "type": "object",
          "required": [
            "record_spec_addr",
            "record_spec_id",
            "record_spec_id_contract_spec_uuid",
            "record_spec_id_hashed_name",
            "record_spec_id_prefix"
          ],
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info is information about the contract spec id referenced in the record_spec_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_addr": {
              "description": "record_spec_addr is the bech32 string version of the record_spec_id.",
              "type": "string"
            },
            "record_spec_id": {
              "description": "record_spec_id is the raw bytes of the record specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_contract_spec_uuid": {
              "description": "record_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_hashed_name": {
              "description": "record_spec_id_hashed_name is the hashed name portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_prefix": {
              "description": "record_spec_id_prefix is the prefix portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordWrapper": {
          "description": "RecordWrapper contains a single record and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "record": {
              "description": "record is the on-chain record message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Record"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_id_info": {
              "description": "record_id_info contains information about the id/address of the record.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_id_info": {
              "description": "record_spec_id_info contains information about the id/address of the record specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Scope": {
          "description": "Scope defines a root reference for a collection of records owned by one or more parties.",
          "type": "object",
          "required": [
            "data_access",
            "owners",
            "require_party_rollup",
            "scope_id",
            "specification_id",
            "value_owner_address"
          ],
          "properties": {
            "data_access": {
              "description": "Addresses in this list are authorized to receive off-chain data associated with this scope.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "owners": {
              "description": "These parties represent top level owners of the records within.  These parties must sign any requests that modify the data within the scope.  These addresses are in union with parties listed on the sessions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "require_party_rollup": {
              "description": "Whether all parties in this scope and its sessions must be present in this scope's owners field. This also enables use of optional=true scope owners and session parties.",
              "type": "boolean"
            },
            "scope_id": {
              "description": "Unique ID for this scope.  Implements sdk.Address interface for use where addresses are required in Cosmos",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "the scope specification that contains the specifications for data elements allowed within this scope",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "value_owner_address": {
              "description": "An address that controls the value associated with this scope.  Standard blockchain accounts and marker accounts are supported for this value.  This attribute may only be changed by the entity indicated once it is set.",
              "type": "string"
            }
          }
        },
        "ScopeIdInfo": {
          "description": "ScopeIdInfo contains various info regarding a scope id.",
          "type": "object",
          "required": [
            "scope_addr",
            "scope_id",
            "scope_id_prefix",
            "scope_id_scope_uuid",
            "scope_uuid"
          ],
          "properties": {
            "scope_addr": {
              "description": "scope_addr is the bech32 string version of the scope_id.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id is the raw bytes of the scope address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_prefix": {
              "description": "scope_id_prefix is the prefix portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_scope_uuid": {
              "description": "scope_id_scope_uuid is the scope_uuid portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_uuid": {
              "description": "scope_uuid is the uuid hex string of the scope_id_scope_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeRequest": {
          "description": "ScopeRequest is the request type for the Query/Scope RPC method.",
          "type": "object",
          "required": [
            "exclude_id_info",
            "include_records",
            "include_request",
            "include_sessions",
            "record_addr",
            "scope_id",
            "session_addr"
          ],
          "properties": {
            "exclude_id_info": {
              "description": "exclude_id_info is a flag for whether to exclude the id info from the response.",
              "type": "boolean"
            },
            "include_records": {
              "description": "include_records is a flag for whether to include the records of the scope in the response.",
              "type": "boolean"
            },
            "include_request": {
              "description": "include_request is a flag for whether to include this request in your result.",
              "type": "boolean"
            },
            "include_sessions": {
              "description": "include_sessions is a flag for whether to include the sessions of the scope in the response.",
              "type": "boolean"
            },
            "record_addr": {
              "description": "record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.",
              "type": "string"
            },
            "session_addr": {
              "description": "session_addr is a bech32 session address, e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr.",
              "type": "string"
            }
          }
        },
        "ScopeSpecIdInfo": {
          "description": "ScopeSpecIdInfo contains various info regarding a scope specification id.",
          "type": "object",
          "required": [
            "scope_spec_addr",
            "scope_spec_id",
            "scope_spec_id_prefix",
            "scope_spec_id_scope_spec_uuid",
            "scope_spec_uuid"
          ],
          "properties": {
            "scope_spec_addr": {
              "description": "scope_spec_addr is the bech32 string version of the scope_spec_id.",
              "type": "string"
            },
            "scope_spec_id": {
              "description": "scope_spec_id is the raw bytes of the scope specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_prefix": {
              "description": "scope_spec_id_prefix is the prefix portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_scope_spec_uuid": {
              "description": "scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_uuid": {
              "description": "scope_spec_uuid is the uuid hex string of the scope_spec_id_scope_spec_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeWrapper": {
          "description": "SessionWrapper contains a single scope and its uuid.",
          "type": "object",
          "properties": {
            "scope": {
              "description": "scope is the on-chain scope message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Scope"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_id_info": {
              "description": "scope_id_info contains information about the id/address of the scope.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_spec_id_info": {
              "description": "scope_spec_id_info contains information about the id/address of the scope specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Session": {
          "description": "Session defines an execution context against a specific specification instance. The context will have a specification and set of parties involved.\n\nNOTE: When there are no more Records within a Scope that reference a Session, the Session is removed.",
          "type": "object",
          "required": [
            "context",
            "name",
            "parties",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "audit": {
              "description": "Created by, updated by, timestamps, version number, and related info.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AuditFields"
                },
                {
                  "type": "null"
                }
              ]
            },
            "context": {
              "description": "context is a field for storing client specific data associated with a session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "name": {
              "description": "name to associate with this session execution context, typically classname",
              "type": "string"
            },
            "parties": {
              "description": "parties is the set of identities that signed this contract",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "session_id": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "unique id of the contract specification that was used to create this session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "SessionIdInfo": {
          "description": "SessionIdInfo contains various info regarding a session id.",
          "type": "object",
          "required": [
            "session_addr",
            "session_id",
            "session_id_prefix",
            "session_id_scope_uuid",
            "session_id_session_uuid",
            "session_uuid"
          ],
          "properties": {
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the session_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_addr": {
              "description": "session_addr is the bech32 string version of the session_id.",
              "type": "string"
            },
            "session_id": {
              "description": "session_id is the raw bytes of the session address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_prefix": {
              "description": "session_id_prefix is the prefix portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_scope_uuid": {
              "description": "session_id_scope_uuid is the scope_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_session_uuid": {
              "description": "session_id_session_uuid is the session_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_uuid": {
              "description": "session_uuid is the uuid hex string of the session_id_session_uuid.",
              "type": "string"
            }
          }
        },
        "SessionWrapper": {
          "description": "SessionWrapper contains a single session and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info contains information about the id/address of the contract specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session": {
              "description": "session is the on-chain session message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Session"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id_info": {
              "description": "session_id_info contains information about the id/address of the session.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SessionIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Source": {
          "description": "data source",
          "oneOf": [
            {
              "description": "the address of a record on chain (For Established Records)",
              "type": "object",
              "required": [
                "RecordId"
              ],
              "properties": {
                "RecordId": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain piece of information (For Proposed Records)",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "type": "object",
          "required": [
            "nanos",
            "seconds"
          ],
          "properties": {
            "nanos": {
              "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
              "type": "integer",
              "format": "int32"
            },
            "seconds": {
              "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "get_sessions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SessionsResponse",
      "description": "SessionsResponse is the response type for the Query/Sessions RPC method.",
      "type": "object",
      "required": [
        "records",
        "sessions"
      ],
      "properties": {
        "records": {
          "description": "records is any number of wrapped records contained in these sessions (if requested).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecordWrapper"
          }
        },
        "request": {
          "description": "request is a copy of the request that generated these results.",
          "anyOf": [
            {
              "$ref": "#/definitions/SessionsRequest"
            },
            {
              "type": "null"
            }
          ]
        },
        "scope": {
          "description": "scope is the wrapped scope that holds these sessions (if requested).",
          "anyOf": [
            {
              "$ref": "#/definitions/ScopeWrapper"
            },
            {
              "type": "null"
            }
          ]
        },
        "sessions": {
          "description": "sessions is any number of wrapped session results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SessionWrapper"
          }
        }
      },
      "definitions": {
        "AuditFields": {
          "description": "AuditFields capture information about the last account to make modifications and when they were made",
          "type": "object",
          "required": [
            "created_by",
            "message",
            "updated_by",
            "version"
          ],
          "properties": {
            "created_by": {
              "description": "the address of the account that created this record",
              "type": "string"
            },
            "created_date": {
              "description": "the date/time when this entry was created",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "message": {
              "description": "an optional message associated with the creation/update event",
              "type": "string"
            },
            "updated_by": {
              "description": "the address of the account that modified this record",
              "type": "string"
            },
            "updated_date": {
              "description": "the date/time when this entry was last updated",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "version": {
              "description": "an optional version number that is incremented with each update",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        "ContractSpecIdInfo": {
          "description": "ContractSpecIdInfo contains various info regarding a contract specification id.",
          "type": "object",
          "required": [
            "contract_spec_addr",
            "contract_spec_id",
            "contract_spec_id_contract_spec_uuid",
            "contract_spec_id_prefix",
            "contract_spec_uuid"
          ],
          "properties": {
            "contract_spec_addr": {
              "description": "contract_spec_addr is the bech32 string version of the contract_spec_id.",
              "type": "string"
            },
            "contract_spec_id": {
              "description": "contract_spec_id is the raw bytes of the contract specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_contract_spec_uuid": {
              "description": "contract_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_id_prefix": {
              "description": "contract_spec_id_prefix is the prefix portion of the contract_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "contract_spec_uuid": {
              "description": "contract_spec_uuid is the uuid hex string of the contract_spec_id_contract_spec_uuid.",
              "type": "string"
            }
          }
        },
        "Party": {
          "description": "A Party is an address with/in a given role associated with a contract",
          "type": "object",
          "required": [
            "address",
            "optional",
            "role"
          ],
          "properties": {
            "address": {
              "description": "address of the account (on chain)",
              "type": "string"
            },
            "optional": {
              "description": "whether this party's signature is optional",
              "type": "boolean"
            },
            "role": {
              "description": "a role for this account within the context of the processes used",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "Process": {
          "description": "Process contains information used to uniquely identify what was used to generate this record",
          "type": "object",
          "required": [
            "method",
            "name"
          ],
          "properties": {
            "method": {
              "description": "method is a name or reference to a specific operation (method) within a class/contract that was invoked",
              "type": "string"
            },
            "name": {
              "description": "a name associated with the process (type_name, classname or smart contract common name)",
              "type": "string"
            },
            "process_id": {
              "description": "unique identifier for this process",
              "anyOf": [
                {
                  "$ref": "#/definitions/ProcessId"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "ProcessId": {
          "description": "unique identifier for this process",
          "oneOf": [
            {
              "description": "the address of a smart contract used for this process",
              "type": "object",
              "required": [
                "Address"
              ],
              "properties": {
                "Address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain process used",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Record": {
          "description": "A record (of fact) is attached to a session or each consideration output from a contract",
          "type": "object",
          "required": [
            "inputs",
            "name",
            "outputs",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "inputs": {
              "description": "inputs used with the process to achieve the output on this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordInput"
              }
            },
            "name": {
              "description": "name/identifier for this record.  Value must be unique within the scope.  Also known as a Fact name",
              "type": "string"
            },
            "outputs": {
              "description": "output(s) is the results of executing the process on the given process indicated in this record",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordOutput"
              }
            },
            "process": {
              "description": "process contain information used to uniquely identify an execution on or off chain that generated this record",
              "anyOf": [
                {
                  "$ref": "#/definitions/Process"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id": {
              "description": "id of the session context that was used to create this record (use with filtered kvprefix iterator)",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "specification_id is the id of the record specification that was used to create this record.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordIdInfo": {
          "description": "RecordIdInfo contains various info regarding a record id.",
          "type": "object",
          "required": [
            "record_addr",
            "record_id",
            "record_id_hashed_name",
            "record_id_prefix",
            "record_id_scope_uuid"
          ],
          "properties": {
            "record_addr": {
              "description": "record_addr is the bech32 string version of the record_id.",
              "type": "string"
            },
            "record_id": {
              "description": "record_id is the raw bytes of the record address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_hashed_name": {
              "description": "record_id_hashed_name is the hashed name portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_prefix": {
              "description": "record_id_prefix is the prefix portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_id_scope_uuid": {
              "description": "record_id_scope_uuid is the scope_uuid portion of the record_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the record_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "RecordInput": {
          "description": "Tracks the inputs used to establish this record",
          "type": "object",
          "required": [
            "name",
            "status",
            "type_name"
          ],
          "properties": {
            "name": {
              "description": "Name value included to link back to the definition spec.",
              "type": "string"
            },
            "source": {
              "description": "data source",
              "anyOf": [
                {
                  "$ref": "#/definitions/Source"
                },
                {
                  "type": "null"
                }
              ]
            },
            "status": {
              "description": "Indicates if this input was a recorded fact on chain or just a given hashed input",
              "type": "integer",
              "format": "int32"
            },
            "type_name": {
              "description": "from proposed fact structure to unmarshal",
              "type": "string"
            }
          }
        },
        "RecordOutput": {
          "description": "RecordOutput encapsulates the output of a process recorded on chain",
          "type": "object",
          "required": [
            "hash",
            "status"
          ],
          "properties": {
            "hash": {
              "description": "Hash of the data output that was output/generated for this record",
              "type": "string"
            },
            "status": {
              "description": "Status of the process execution associated with this output indicating success,failure, or pending",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "RecordSpecIdInfo": {
          "description": "RecordSpecIdInfo contains various info regarding a record specification id.",
          "type": "object",
          "required": [
            "record_spec_addr",
            "record_spec_id",
            "record_spec_id_contract_spec_uuid",
            "record_spec_id_hashed_name",
            "record_spec_id_prefix"
          ],
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info is information about the contract spec id referenced in the record_spec_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_addr": {
              "description": "record_spec_addr is the bech32 string version of the record_spec_id.",
              "type": "string"
            },
            "record_spec_id": {
              "description": "record_spec_id is the raw bytes of the record specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_contract_spec_uuid": {
              "description": "record_spec_id_contract_spec_uuid is the contract_spec_uuid portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_hashed_name": {
              "description": "record_spec_id_hashed_name is the hashed name portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "record_spec_id_prefix": {
              "description": "record_spec_id_prefix is the prefix portion of the record_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "RecordWrapper": {
          "description": "RecordWrapper contains a single record and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "record": {
              "description": "record is the on-chain record message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Record"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_id_info": {
              "description": "record_id_info contains information about the id/address of the record.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "record_spec_id_info": {
              "description": "record_spec_id_info contains information about the id/address of the record specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/RecordSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Scope": {
          "description": "Scope defines a root reference for a collection of records owned by one or more parties.",
          "type": "object",
          "required": [
            "data_access",
            "owners",
            "require_party_rollup",
            "scope_id",
            "specification_id",
            "value_owner_address"
          ],
          "properties": {
            "data_access": {
              "description": "Addresses in this list are authorized to receive off-chain data associated with this scope.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "owners": {
              "description": "These parties represent top level owners of the records within.  These parties must sign any requests that modify the data within the scope.  These addresses are in union with parties listed on the sessions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "require_party_rollup": {
              "description": "Whether all parties in this scope and its sessions must be present in this scope's owners field. This also enables use of optional=true scope owners and session parties.",
              "type": "boolean"
            },
            "scope_id": {
              "description": "Unique ID for this scope.  Implements sdk.Address interface for use where addresses are required in Cosmos",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "the scope specification that contains the specifications for data elements allowed within this scope",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "value_owner_address": {
              "description": "An address that controls the value associated with this scope.  Standard blockchain accounts and marker accounts are supported for this value.  This attribute may only be changed by the entity indicated once it is set.",
              "type": "string"
            }
          }
        },
        "ScopeIdInfo": {
          "description": "ScopeIdInfo contains various info regarding a scope id.",
          "type": "object",
          "required": [
            "scope_addr",
            "scope_id",
            "scope_id_prefix",
            "scope_id_scope_uuid",
            "scope_uuid"
          ],
          "properties": {
            "scope_addr": {
              "description": "scope_addr is the bech32 string version of the scope_id.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id is the raw bytes of the scope address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_prefix": {
              "description": "scope_id_prefix is the prefix portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_id_scope_uuid": {
              "description": "scope_id_scope_uuid is the scope_uuid portion of the scope_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_uuid": {
              "description": "scope_uuid is the uuid hex string of the scope_id_scope_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeSpecIdInfo": {
          "description": "ScopeSpecIdInfo contains various info regarding a scope specification id.",
          "type": "object",
          "required": [
            "scope_spec_addr",
            "scope_spec_id",
            "scope_spec_id_prefix",
            "scope_spec_id_scope_spec_uuid",
            "scope_spec_uuid"
          ],
          "properties": {
            "scope_spec_addr": {
              "description": "scope_spec_addr is the bech32 string version of the scope_spec_id.",
              "type": "string"
            },
            "scope_spec_id": {
              "description": "scope_spec_id is the raw bytes of the scope specification address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_prefix": {
              "description": "scope_spec_id_prefix is the prefix portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_id_scope_spec_uuid": {
              "description": "scope_spec_id_scope_spec_uuid is the scope_spec_uuid portion of the scope_spec_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "scope_spec_uuid": {
              "description": "scope_spec_uuid is the uuid hex string of the scope_spec_id_scope_spec_uuid.",
              "type": "string"
            }
          }
        },
        "ScopeWrapper": {
          "description": "SessionWrapper contains a single scope and its uuid.",
          "type": "object",
          "properties": {
            "scope": {
              "description": "scope is the on-chain scope message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Scope"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_id_info": {
              "description": "scope_id_info contains information about the id/address of the scope.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "scope_spec_id_info": {
              "description": "scope_spec_id_info contains information about the id/address of the scope specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "Session": {
          "description": "Session defines an execution context against a specific specification instance. The context will have a specification and set of parties involved.\n\nNOTE: When there are no more Records within a Scope that reference a Session, the Session is removed.",
          "type": "object",
          "required": [
            "context",
            "name",
            "parties",
            "session_id",
            "specification_id"
          ],
          "properties": {
            "audit": {
              "description": "Created by, updated by, timestamps, version number, and related info.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AuditFields"
                },
                {
                  "type": "null"
                }
              ]
            },
            "context": {
              "description": "context is a field for storing client specific data associated with a session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "name": {
              "description": "name to associate with this session execution context, typically classname",
              "type": "string"
            },
            "parties": {
              "description": "parties is the set of identities that signed this contract",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Party"
              }
            },
            "session_id": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "specification_id": {
              "description": "unique id of the contract specification that was used to create this session.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        },
        "SessionIdInfo": {
          "description": "SessionIdInfo contains various info regarding a session id.",
          "type": "object",
          "required": [
            "session_addr",
            "session_id",
            "session_id_prefix",
            "session_id_scope_uuid",
            "session_id_session_uuid",
            "session_uuid"
          ],
          "properties": {
            "scope_id_info": {
              "description": "scope_id_info is information about the scope id referenced in the session_id.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ScopeIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_addr": {
              "description": "session_addr is the bech32 string version of the session_id.",
              "type": "string"
            },
            "session_id": {
              "description": "session_id is the raw bytes of the session address.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_prefix": {
              "description": "session_id_prefix is the prefix portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_scope_uuid": {
              "description": "session_id_scope_uuid is the scope_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_id_session_uuid": {
              "description": "session_id_session_uuid is the session_uuid portion of the session_id.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "session_uuid": {
              "description": "session_uuid is the uuid hex string of the session_id_session_uuid.",
              "type": "string"
            }
          }
        },
        "SessionWrapper": {
          "description": "SessionWrapper contains a single session and some extra identifiers for it.",
          "type": "object",
          "properties": {
            "contract_spec_id_info": {
              "description": "contract_spec_id_info contains information about the id/address of the contract specification.",
              "anyOf": [
                {
                  "$ref": "#/definitions/ContractSpecIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session": {
              "description": "session is the on-chain session message.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Session"
                },
                {
                  "type": "null"
                }
              ]
            },
            "session_id_info": {
              "description": "session_id_info contains information about the id/address of the session.",
              "anyOf": [
                {
                  "$ref": "#/definitions/SessionIdInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        "SessionsRequest": {
          "description": "SessionsRequest is the request type for the Query/Sessions RPC method.",
          "type": "object",
          "required": [
            "exclude_id_info",
            "include_records",
            "include_request",
            "include_scope",
            "record_addr",
            "record_name",
            "scope_id",
            "session_id"
          ],
          "properties": {
            "exclude_id_info": {
              "description": "exclude_id_info is a flag for whether to exclude the id info from the response.",
              "type": "boolean"
            },
            "include_records": {
              "description": "include_records is a flag for whether to include the records of these sessions in the response.",
              "type": "boolean"
            },
            "include_request": {
              "description": "include_request is a flag for whether to include this request in your result.",
              "type": "boolean"
            },
            "include_scope": {
              "description": "include_scope is a flag for whether to include the scope containing these sessions in the response.",
              "type": "boolean"
            },
            "record_addr": {
              "description": "record_addr is a bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.",
              "type": "string"
            },
            "record_name": {
              "description": "record_name is the name of the record to find the session for in the provided scope.",
              "type": "string"
            },
            "scope_id": {
              "description": "scope_id can either be a uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a bech32 scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel.",
              "type": "string"
            },
            "session_id": {
              "description": "session_id can either be a uuid, e.g. 5803f8bc-6067-4eb5-951f-2121671c2ec0 or a bech32 session address, e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. This can only be a uuid if a scope_id is also provided.",
              "type": "string"
            }
          }
        },
        "Source": {
          "description": "data source",
          "oneOf": [
            {
              "description": "the address of a record on chain (For Established Records)",
              "type": "object",
              "required": [
                "RecordId"
              ],
              "properties": {
                "RecordId": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "the hash of an off-chain piece of information (For Proposed Records)",
              "type": "object",
              "required": [
                "Hash"
              ],
              "properties": {
                "Hash": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "type": "object",
          "required": [
            "nanos",
            "seconds"
          ],
          "properties": {
            "nanos": {
              "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
              "type": "integer",
              "format": "int32"
            },
            "seconds": {
              "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    }
  }
}
